name: Update Repositories
run-name: Update directories action started by ${{ github.actor }}

on:
  push:
    branches:
      - main

defaults:
  run:
    shell: bash --noprofile --norc -exo pipefail {0}

jobs:
  get-repos:
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.get-repos.outputs.repos }}
    steps:
      - name: Checkout actions repository
        uses: actions/checkout@v2

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_SECRET }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Get template-project repositories
        id: get-repos
        run: |
          PAGE=1
          PER_PAGE=100
          TOTAL_REPOSITORIES=0
          REPOSITORIES=""
          while true; do
            RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GIT_TOKEN }}" "https://api.github.com/user/repos?per_page=$PER_PAGE&page=$PAGE")
            LINK_HEADER=$(echo "$RESPONSE" | grep -i '^link:')
            if [ -z "$LINK_HEADER" ]; then
              break
            fi
            REPOS_PAGE=$(echo "$RESPONSE" | jq -r '.[] | select(.name | contains("template-project")) | .ssh_url')
            if [ -z "$REPOS_PAGE" ]; then
              break
            fi
            REPOSITORIES="$REPOSITORIES$REPOS_PAGE"$'\n'
            PAGE=$((PAGE+1))
          done
          if [ -n "$REPOSITORIES" ]; then
            REPOSITORIES_JSON=$(echo "$REPOSITORIES" | jq -cRs 'split("\n") | .[:-1]')
            echo "repos=$REPOSITORIES_JSON" >> "$GITHUB_ENV"
            echo "repos=$REPOSITORIES_JSON" >> "$GITHUB_OUTPUT"
          fi

  update-repo:
    needs: get-repos
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        repo: ${{ fromJson(needs.get-repos.outputs.repos) }}
    steps:
      - name: Checkout actions repository
        uses: actions/checkout@v2

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_SECRET }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Set up Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "bot"

      - name: Load config file
        id: load-config
        run: |
          CONFIG=$(jq -c . < ./config.json)
          echo "config=$CONFIG" >> $GITHUB_ENV

      - name: Get Repository Name
        id: get-repository-name
        run: |
          repo_name=$(echo ${{ matrix.repo }} | awk -F'[:/.]' '{print $(NF-1)}')
          echo "repo_name=$repo_name" >> $GITHUB_ENV

      - name: Verify if has available actions
        run: |
          echo "hasAvailableActions=false" >> $GITHUB_ENV
          for file in $(echo "$config" | jq -r 'keys[]'); do
            repos_allowed=$(echo "$config" | jq -r --arg file "$file" '.[$file].reposAllowed')
            repos_blocked=$(echo "$config" | jq -r --arg file "$file" '.[$file].reposBlocked')
            if [[ "$repos_allowed" == "*" || $(echo "$repos_allowed" | jq --arg repoName "$repo_name" 'index([$repoName])') != "null" ]]; then
              if ! echo "$repos_blocked" | jq -e --arg repoName "$repo_name" 'index([$repoName])' > /dev/null; then
                echo "hasAvailableActions=true" >> $GITHUB_ENV
                break
              else
                echo "$repo_name is blocked for $file, skipping..."
              fi
            fi
          done

      - name: Process repository
        if: env.hasAvailableActions == 'true'
        id: process-repo
        run: |
          repo=${{ matrix.repo }}
          process_file() {
            local file=$1
            local repos_allowed=$(echo "$config" | jq -r --arg file "$file" '.[$file].reposAllowed')
            local repos_blocked=$(echo "$config" | jq -r --arg file "$file" '.[$file].reposBlocked')
            if [[ "$repos_allowed" == "*" || $(echo "$repos_allowed" | jq --arg repoName "$repo_name" 'index([$repoName])') != "null" ]]; then
              if ! echo "$repos_blocked" | jq -e --arg repoName "$repo_name" 'index([$repoName])' > /dev/null; then
                echo "Copying $file to $repo_name"
                cp ".github/actions/$file.yaml" "cloned/.github/workflows"
              else
                echo "$repo_name is blocked for $file, skipping..."
              fi
            fi
          }
          git clone $repo cloned -b develop
          rm -rf cloned/.github/workflows
          mkdir -p cloned/.github/workflows
          for file in $(echo $config | jq -r 'keys[]'); do
            process_file $file
          done
          cd cloned
          git add .
          git status
          if ! git diff --cached --quiet --exit-code; then
            echo "Committing and pushing changes to $repo"
            git commit -m "build(github): bot update repository workflows"
            git push
            git pull
            git rebase origin/main
            git push --force-with-lease
          else
            echo "No changes detected by git diff --cached"
          fi
            cd ..
            rm -rf cloned
